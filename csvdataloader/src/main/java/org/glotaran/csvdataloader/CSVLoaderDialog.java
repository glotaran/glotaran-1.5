/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CSVLoaderDialog.java
 *
 * Created on Feb 12, 2013, 11:24:42 AM
 */
package org.glotaran.csvdataloader;

import java.awt.Component;
import java.awt.Container;
import java.io.File;
import java.io.IOException;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JRadioButton;
import javax.swing.SpinnerNumberModel;
import org.openide.util.Exceptions;
import org.ujmp.core.Matrix;
import org.ujmp.core.MatrixFactory;
import org.ujmp.core.calculation.Calculation;
import org.ujmp.core.enums.FileFormat;
import org.ujmp.core.exceptions.MatrixException;
import org.ujmp.gui.MatrixGUIObject;
import org.ujmp.gui.panels.MatrixTableEditorPanel;

/**
 *
 * @author Sergey
 */
public class CSVLoaderDialog extends javax.swing.JPanel {

    private File file = null;
    private Matrix dataMatrix=null;
    /**
     * Creates new form CSVLoaderDialog
     */
    public CSVLoaderDialog() {
        initComponents();
    }

    public CSVLoaderDialog(MatrixTableEditorPanel matixEditor) {
        initComponents();
        jpMatrixEditor.add(matixEditor);

        
    }

    CSVLoaderDialog(File file) {
        initComponents();
        this.file = file;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jRBGDelimiter = new javax.swing.ButtonGroup();
        jRBGFileType = new javax.swing.ButtonGroup();
        jGBGCalibrationType = new javax.swing.ButtonGroup();
        jpMatrixEditor = new javax.swing.JPanel();
        jPSkip = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        spSkipRows = new javax.swing.JSpinner();
        spSkipColums = new javax.swing.JSpinner();
        jCBAutoSkip = new javax.swing.JCheckBox();
        jPEnableLifetimeDensityMap = new javax.swing.JPanel();
        jPLifetimeDensityMapSettings = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jFTFFrom = new javax.swing.JFormattedTextField();
        jCBLinLogEnabeled = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jFTFTo = new javax.swing.JFormattedTextField();
        jFTFLogFrom = new javax.swing.JFormattedTextField();
        jLabel3 = new javax.swing.JLabel();
        jFTFLinearFraction = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jFTFLastLifetimeMult = new javax.swing.JFormattedTextField();
        jFTFTimepoints = new javax.swing.JFormattedTextField();
        jRBLifetimeDensityMap = new javax.swing.JRadioButton();
        jPSeparator = new javax.swing.JPanel();
        jRBComma = new javax.swing.JRadioButton();
        jRBSemicolon = new javax.swing.JRadioButton();
        jRBTab = new javax.swing.JRadioButton();
        jRBSpace = new javax.swing.JRadioButton();
        jTFOtherSeparator = new javax.swing.JTextField();
        jRBOther = new javax.swing.JRadioButton();
        jPLabels = new javax.swing.JPanel();
        cbLabelsInRows = new javax.swing.JCheckBox();
        cbLabelsInColums = new javax.swing.JCheckBox();
        jBPreview = new javax.swing.JButton();
        jPSingleMatrix = new javax.swing.JPanel();
        jRBSingleMatrix = new javax.swing.JRadioButton();
        jpCalibration = new javax.swing.JPanel();
        rbLoadFromFile = new javax.swing.JRadioButton();
        tfFilename = new javax.swing.JTextField();
        bOpenFile = new javax.swing.JButton();
        jRBCaibrationByFun = new javax.swing.JRadioButton();
        cbWaveCalbration = new javax.swing.JCheckBox();
        cbspectraInRows = new javax.swing.JCheckBox();
        jPTimeGateMatrixSettings = new javax.swing.JPanel();
        jRBTimeGatMat = new javax.swing.JRadioButton();
        jPTimeGateMatSettings = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();

        setMinimumSize(new java.awt.Dimension(950, 500));
        setPreferredSize(new java.awt.Dimension(950, 500));
        setLayout(new java.awt.GridBagLayout());

        jpMatrixEditor.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 600;
        gridBagConstraints.ipady = 500;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jpMatrixEditor, gridBagConstraints);

        jPSkip.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jPSkip.border.title"))); // NOI18N
        jPSkip.setMinimumSize(new java.awt.Dimension(245, 40));
        jPSkip.setPreferredSize(new java.awt.Dimension(245, 40));
        jPSkip.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jLabel1.text")); // NOI18N
        jPSkip.add(jLabel1, new java.awt.GridBagConstraints());

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jLabel2.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPSkip.add(jLabel2, gridBagConstraints);

        spSkipRows.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
        spSkipRows.setName(""); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPSkip.add(spSkipRows, gridBagConstraints);

        spSkipColums.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPSkip.add(spSkipColums, gridBagConstraints);

        jCBAutoSkip.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jCBAutoSkip.text")); // NOI18N
        jCBAutoSkip.setToolTipText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jCBAutoSkip.toolTipText")); // NOI18N
        jPSkip.add(jCBAutoSkip, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(jPSkip, gridBagConstraints);

        jPEnableLifetimeDensityMap.setBackground(new java.awt.Color(223, 223, 223));
        jPEnableLifetimeDensityMap.setMinimumSize(new java.awt.Dimension(260, 170));
        jPEnableLifetimeDensityMap.setPreferredSize(new java.awt.Dimension(260, 170));
        jPEnableLifetimeDensityMap.setLayout(new java.awt.GridBagLayout());

        jPLifetimeDensityMapSettings.setEnabled(false);
        jPLifetimeDensityMapSettings.setLayout(new java.awt.GridBagLayout());

        jLabel4.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jLabel4.text")); // NOI18N
        jLabel4.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPLifetimeDensityMapSettings.add(jLabel4, gridBagConstraints);

        jFTFFrom.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.####"))));
        jFTFFrom.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jFTFFrom.text")); // NOI18N
        jFTFFrom.setEnabled(false);
        jFTFFrom.setPreferredSize(new java.awt.Dimension(60, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPLifetimeDensityMapSettings.add(jFTFFrom, gridBagConstraints);

        jCBLinLogEnabeled.setSelected(true);
        jCBLinLogEnabeled.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jCBLinLogEnabeled.text")); // NOI18N
        jCBLinLogEnabeled.setEnabled(false);
        jCBLinLogEnabeled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBLinLogEnabeledActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPLifetimeDensityMapSettings.add(jCBLinLogEnabeled, gridBagConstraints);

        jLabel5.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jLabel5.text")); // NOI18N
        jLabel5.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPLifetimeDensityMapSettings.add(jLabel5, gridBagConstraints);

        jLabel6.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jLabel6.text")); // NOI18N
        jLabel6.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPLifetimeDensityMapSettings.add(jLabel6, gridBagConstraints);

        jFTFTo.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.####"))));
        jFTFTo.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jFTFTo.text")); // NOI18N
        jFTFTo.setEnabled(false);
        jFTFTo.setPreferredSize(new java.awt.Dimension(60, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        jPLifetimeDensityMapSettings.add(jFTFTo, gridBagConstraints);

        jFTFLogFrom.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.####"))));
        jFTFLogFrom.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jFTFLogFrom.text")); // NOI18N
        jFTFLogFrom.setEnabled(false);
        jFTFLogFrom.setPreferredSize(new java.awt.Dimension(60, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPLifetimeDensityMapSettings.add(jFTFLogFrom, gridBagConstraints);

        jLabel3.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jLabel3.text")); // NOI18N
        jLabel3.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPLifetimeDensityMapSettings.add(jLabel3, gridBagConstraints);

        jFTFLinearFraction.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        jFTFLinearFraction.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jFTFLinearFraction.text")); // NOI18N
        jFTFLinearFraction.setEnabled(false);
        jFTFLinearFraction.setPreferredSize(new java.awt.Dimension(60, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        jPLifetimeDensityMapSettings.add(jFTFLinearFraction, gridBagConstraints);

        jLabel7.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jLabel7.text")); // NOI18N
        jLabel7.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPLifetimeDensityMapSettings.add(jLabel7, gridBagConstraints);

        jLabel8.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jLabel8.text")); // NOI18N
        jLabel8.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPLifetimeDensityMapSettings.add(jLabel8, gridBagConstraints);

        jFTFLastLifetimeMult.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.####"))));
        jFTFLastLifetimeMult.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jFTFLastLifetimeMult.text")); // NOI18N
        jFTFLastLifetimeMult.setEnabled(false);
        jFTFLastLifetimeMult.setPreferredSize(new java.awt.Dimension(60, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPLifetimeDensityMapSettings.add(jFTFLastLifetimeMult, gridBagConstraints);

        jFTFTimepoints.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.####"))));
        jFTFTimepoints.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jFTFTimepoints.text")); // NOI18N
        jFTFTimepoints.setEnabled(false);
        jFTFTimepoints.setPreferredSize(new java.awt.Dimension(60, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPLifetimeDensityMapSettings.add(jFTFTimepoints, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPEnableLifetimeDensityMap.add(jPLifetimeDensityMapSettings, gridBagConstraints);

        jRBGFileType.add(jRBLifetimeDensityMap);
        jRBLifetimeDensityMap.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jRBLifetimeDensityMap.text")); // NOI18N
        jRBLifetimeDensityMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBLifetimeDensityMapActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        jPEnableLifetimeDensityMap.add(jRBLifetimeDensityMap, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(jPEnableLifetimeDensityMap, gridBagConstraints);

        jPSeparator.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jPSeparator.border.title"))); // NOI18N
        jPSeparator.setMinimumSize(new java.awt.Dimension(380, 40));
        jPSeparator.setPreferredSize(new java.awt.Dimension(380, 40));
        jPSeparator.setLayout(new java.awt.GridBagLayout());

        jRBGDelimiter.add(jRBComma);
        jRBComma.setSelected(true);
        jRBComma.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jRBComma.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPSeparator.add(jRBComma, gridBagConstraints);

        jRBGDelimiter.add(jRBSemicolon);
        jRBSemicolon.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jRBSemicolon.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPSeparator.add(jRBSemicolon, gridBagConstraints);

        jRBGDelimiter.add(jRBTab);
        jRBTab.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jRBTab.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPSeparator.add(jRBTab, gridBagConstraints);

        jRBGDelimiter.add(jRBSpace);
        jRBSpace.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jRBSpace.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPSeparator.add(jRBSpace, gridBagConstraints);

        jTFOtherSeparator.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jTFOtherSeparator.text")); // NOI18N
        jTFOtherSeparator.setMinimumSize(new java.awt.Dimension(30, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPSeparator.add(jTFOtherSeparator, gridBagConstraints);

        jRBGDelimiter.add(jRBOther);
        jRBOther.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jRBOther.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPSeparator.add(jRBOther, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(jPSeparator, gridBagConstraints);

        jPLabels.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jPLabels.border.title"))); // NOI18N
        jPLabels.setMinimumSize(new java.awt.Dimension(220, 40));
        jPLabels.setPreferredSize(new java.awt.Dimension(220, 40));
        jPLabels.setLayout(new java.awt.GridBagLayout());

        cbLabelsInRows.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.cbLabelsInRows.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPLabels.add(cbLabelsInRows, gridBagConstraints);

        cbLabelsInColums.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.cbLabelsInColums.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPLabels.add(cbLabelsInColums, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(jPLabels, gridBagConstraints);

        jBPreview.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jBPreview.text")); // NOI18N
        jBPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBPreviewActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 0, 0, 0);
        add(jBPreview, gridBagConstraints);

        jPSingleMatrix.setMinimumSize(new java.awt.Dimension(260, 160));
        jPSingleMatrix.setPreferredSize(new java.awt.Dimension(260, 160));
        jPSingleMatrix.setLayout(new java.awt.GridBagLayout());

        jRBGFileType.add(jRBSingleMatrix);
        jRBSingleMatrix.setSelected(true);
        jRBSingleMatrix.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jRBSingleMatrix.text")); // NOI18N
        jRBSingleMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBSingleMatrixActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPSingleMatrix.add(jRBSingleMatrix, gridBagConstraints);

        jpCalibration.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.border.title"))); // NOI18N
        jpCalibration.setMinimumSize(new java.awt.Dimension(230, 90));
        jpCalibration.setName(""); // NOI18N
        jpCalibration.setPreferredSize(new java.awt.Dimension(230, 90));
        jpCalibration.setLayout(new java.awt.GridBagLayout());

        rbLoadFromFile.setSelected(true);
        rbLoadFromFile.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.rbLoadFromFile.text")); // NOI18N
        rbLoadFromFile.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jpCalibration.add(rbLoadFromFile, gridBagConstraints);

        tfFilename.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfFilename.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.tfFilename.text")); // NOI18N
        tfFilename.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 180;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jpCalibration.add(tfFilename, gridBagConstraints);

        bOpenFile.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.bOpenFile.text")); // NOI18N
        bOpenFile.setEnabled(false);
        bOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOpenFileActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = -14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jpCalibration.add(bOpenFile, gridBagConstraints);

        jRBCaibrationByFun.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jRBCaibrationByFun.text")); // NOI18N
        jRBCaibrationByFun.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jpCalibration.add(jRBCaibrationByFun, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPSingleMatrix.add(jpCalibration, gridBagConstraints);

        cbWaveCalbration.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.cbWaveCalbration.text")); // NOI18N
        cbWaveCalbration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbWaveCalbrationActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 29, 0, 0);
        jPSingleMatrix.add(cbWaveCalbration, gridBagConstraints);

        cbspectraInRows.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.cbspectraInRows.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 29, 0, 0);
        jPSingleMatrix.add(cbspectraInRows, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(jPSingleMatrix, gridBagConstraints);

        jPTimeGateMatrixSettings.setMinimumSize(new java.awt.Dimension(260, 100));
        jPTimeGateMatrixSettings.setPreferredSize(new java.awt.Dimension(260, 100));
        jPTimeGateMatrixSettings.setLayout(new java.awt.GridBagLayout());

        jRBGFileType.add(jRBTimeGatMat);
        jRBTimeGatMat.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jRBTimeGatMat.text")); // NOI18N
        jRBTimeGatMat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBTimeGatMatActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        jPTimeGateMatrixSettings.add(jRBTimeGatMat, gridBagConstraints);

        jPTimeGateMatSettings.setLayout(new java.awt.GridBagLayout());

        jTextField1.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jTextField2.text")); // NOI18N
        jTextField1.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        jPTimeGateMatSettings.add(jTextField1, gridBagConstraints);

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel9.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jLabel9.text")); // NOI18N
        jLabel9.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        jPTimeGateMatSettings.add(jLabel9, gridBagConstraints);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel10.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jLabel10.text")); // NOI18N
        jLabel10.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPTimeGateMatSettings.add(jLabel10, gridBagConstraints);

        jTextField2.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jTextField2.text")); // NOI18N
        jTextField2.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPTimeGateMatSettings.add(jTextField2, gridBagConstraints);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel11.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jLabel11.text")); // NOI18N
        jLabel11.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPTimeGateMatSettings.add(jLabel11, gridBagConstraints);

        jTextField3.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jTextField2.text")); // NOI18N
        jTextField3.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPTimeGateMatSettings.add(jTextField3, gridBagConstraints);

        jLabel12.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jLabel12.text")); // NOI18N
        jLabel12.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        jPTimeGateMatSettings.add(jLabel12, gridBagConstraints);

        jLabel13.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jLabel13.text")); // NOI18N
        jLabel13.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        jPTimeGateMatSettings.add(jLabel13, gridBagConstraints);

        jTextField4.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jTextField4.text")); // NOI18N
        jTextField4.setEnabled(false);
        jTextField4.setPreferredSize(new java.awt.Dimension(6, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.weightx = 1.0;
        jPTimeGateMatSettings.add(jTextField4, gridBagConstraints);

        jLabel14.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jLabel14.text")); // NOI18N
        jLabel14.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        jPTimeGateMatSettings.add(jLabel14, gridBagConstraints);

        jTextField5.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jTextField5.text")); // NOI18N
        jTextField5.setEnabled(false);
        jTextField5.setPreferredSize(new java.awt.Dimension(6, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPTimeGateMatSettings.add(jTextField5, gridBagConstraints);

        jTextField6.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jTextField6.text")); // NOI18N
        jTextField6.setEnabled(false);
        jTextField6.setPreferredSize(new java.awt.Dimension(6, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPTimeGateMatSettings.add(jTextField6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPTimeGateMatrixSettings.add(jPTimeGateMatSettings, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(jPTimeGateMatrixSettings, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void cbWaveCalbrationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbWaveCalbrationActionPerformed
        Component[] components = jpCalibration.getComponents();
        for (Component component : components) {
            component.setEnabled(cbWaveCalbration.isSelected());
        }
        cbWaveCalbration.setEnabled(true);
    }//GEN-LAST:event_cbWaveCalbrationActionPerformed

    private void bOpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOpenFileActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Select file with ...");
        chooser.setMultiSelectionEnabled(false);
//        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            tfFilename.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_bOpenFileActionPerformed

    private void jCBLinLogEnabeledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBLinLogEnabeledActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCBLinLogEnabeledActionPerformed

    private void jRBLifetimeDensityMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBLifetimeDensityMapActionPerformed
        updateTypeUI();
        cbLabelsInColums.setSelected(false);
        cbLabelsInRows.setSelected(false);
        setEnabledRecursively(jPLabels,true);
    }//GEN-LAST:event_jRBLifetimeDensityMapActionPerformed

    private void jRBTimeGatMatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBTimeGatMatActionPerformed
        updateTypeUI();
        cbLabelsInColums.setSelected(true);
        cbLabelsInRows.setSelected(true);
        setEnabledRecursively(jPLabels,false);
        
    }//GEN-LAST:event_jRBTimeGatMatActionPerformed

    private void jRBSingleMatrixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBSingleMatrixActionPerformed
        updateTypeUI();
        cbLabelsInColums.setSelected(false);
        cbLabelsInRows.setSelected(false);
        setEnabledRecursively(jPLabels,true);
    }//GEN-LAST:event_jRBSingleMatrixActionPerformed

    private void jBPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBPreviewActionPerformed
        try {
            dataMatrix = MatrixFactory.importFromFile(FileFormat.CSV, file, getDelimiterString());
            //if ((getSkipRows() > 0) || (getSkipColums() > 0)) {
                dataMatrix = dataMatrix.subMatrix(Calculation.Ret.LINK, getSkipRows(), getSkipColums(), dataMatrix.getRowCount() - 1, dataMatrix.getColumnCount() - 1);
            //}
            MatrixTableEditorPanel matPanel = new MatrixTableEditorPanel(new MatrixGUIObject(dataMatrix));
            jpMatrixEditor.removeAll();
            jpMatrixEditor.add(matPanel);
            jpMatrixEditor.validate();
        } catch (MatrixException | IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_jBPreviewActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bOpenFile;
    private javax.swing.JCheckBox cbLabelsInColums;
    private javax.swing.JCheckBox cbLabelsInRows;
    private javax.swing.JCheckBox cbWaveCalbration;
    private javax.swing.JCheckBox cbspectraInRows;
    private javax.swing.JButton jBPreview;
    private javax.swing.JCheckBox jCBAutoSkip;
    private javax.swing.JCheckBox jCBLinLogEnabeled;
    private javax.swing.JFormattedTextField jFTFFrom;
    private javax.swing.JFormattedTextField jFTFLastLifetimeMult;
    private javax.swing.JFormattedTextField jFTFLinearFraction;
    private javax.swing.JFormattedTextField jFTFLogFrom;
    private javax.swing.JFormattedTextField jFTFTimepoints;
    private javax.swing.JFormattedTextField jFTFTo;
    private javax.swing.ButtonGroup jGBGCalibrationType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPEnableLifetimeDensityMap;
    private javax.swing.JPanel jPLabels;
    private javax.swing.JPanel jPLifetimeDensityMapSettings;
    private javax.swing.JPanel jPSeparator;
    private javax.swing.JPanel jPSingleMatrix;
    private javax.swing.JPanel jPSkip;
    private javax.swing.JPanel jPTimeGateMatSettings;
    private javax.swing.JPanel jPTimeGateMatrixSettings;
    private javax.swing.JRadioButton jRBCaibrationByFun;
    private javax.swing.JRadioButton jRBComma;
    private javax.swing.ButtonGroup jRBGDelimiter;
    private javax.swing.ButtonGroup jRBGFileType;
    private javax.swing.JRadioButton jRBLifetimeDensityMap;
    private javax.swing.JRadioButton jRBOther;
    private javax.swing.JRadioButton jRBSemicolon;
    private javax.swing.JRadioButton jRBSingleMatrix;
    private javax.swing.JRadioButton jRBSpace;
    private javax.swing.JRadioButton jRBTab;
    private javax.swing.JRadioButton jRBTimeGatMat;
    private javax.swing.JTextField jTFOtherSeparator;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JPanel jpCalibration;
    private javax.swing.JPanel jpMatrixEditor;
    private javax.swing.JRadioButton rbLoadFromFile;
    private javax.swing.JSpinner spSkipColums;
    private javax.swing.JSpinner spSkipRows;
    private javax.swing.JTextField tfFilename;
    // End of variables declaration//GEN-END:variables

    public boolean isLifetimeDensityMap() {
        return jRBLifetimeDensityMap.isSelected();
    }

    public boolean isSingleMatrix() {
        return jRBSingleMatrix.isSelected();
    }

    public boolean isTimeGatedMattrix() {
        return jRBTimeGatMat.isSelected();
    }

    
    
    public boolean isLabelsInColums() {
        if (isSpectraInRows()) {
            return cbLabelsInRows.isSelected();
        } else {
            return cbLabelsInColums.isSelected();
        }
    }

    public boolean isLabelsInRows() {
        if (isSpectraInRows()) {
            return cbLabelsInColums.isSelected();
        } else {
            return cbLabelsInRows.isSelected();
        }
    }

    public boolean isWaveCalbrationEnabled() {
        return cbWaveCalbration.isSelected();
    }

    public boolean isSpectraInRows() {
        return cbspectraInRows.isSelected();
    }

    public String getFilename() {
        return tfFilename.getText();
    }

    public boolean getAutoSkip() {
        return jCBAutoSkip.isSelected();
    }        

    public int getSkipRows() {
        return ((SpinnerNumberModel) spSkipRows.getModel()).getNumber().intValue();
    }

    public int getSkipColums() {
        return ((SpinnerNumberModel) spSkipColums.getModel()).getNumber().intValue();
    }
    
    public double getFrom() {
        return Double.valueOf(jFTFFrom.getText());
    }

    public double getLinearFraction() {
        return Double.valueOf(jFTFLinearFraction.getText());
    }

    public double getLogFrom() {
        return Double.valueOf(jFTFLogFrom.getText());
    }

    public double getLastLifetimeMult() {
        return Double.valueOf(jFTFLastLifetimeMult.getText());
    }

    public int getTimepoints() {
        Integer jFTFTimepointsValue;
        try {
            jFTFTimepointsValue = Integer.valueOf(jFTFTimepoints.getText());
        } catch (Exception e) {
            jFTFTimepointsValue = 1000;
        }
        return (int) jFTFTimepointsValue;
    }

    public double getTo() {
        return Double.valueOf(jFTFTo.getText());
    }

    public boolean isLinLogEnabeled() {
        return jCBLinLogEnabeled.isSelected();
    }
    
    public Matrix getDtaMatrix(){
        return dataMatrix;
    }

    public String getDelimiterString(){
        String delim = "";
        if (jRBComma.isSelected()) {delim = ",";}
        if (jRBSemicolon.isSelected()) {delim = ";";}
        if (jRBTab.isSelected()) {delim = "\t";}
        if (jRBSpace.isSelected()) {delim = " ";}
        if (jRBOther.isSelected()) {delim = jTFOtherSeparator.getText();}
        return delim; 
    }
    private void updateTypeUI(){
        setEnabledRecursively(jPLifetimeDensityMapSettings,jRBLifetimeDensityMap.isSelected());
        setEnabledRecursively(jPTimeGateMatSettings,jRBTimeGatMat.isSelected());
        setEnabledRecursively(jPSingleMatrix,jRBSingleMatrix.isSelected());
        if (jRBSingleMatrix.isSelected()){
        setEnabledRecursively(jpCalibration,cbWaveCalbration.isSelected());
        }
        jRBSingleMatrix.setEnabled(true);
    }
    
    private void setEnabledRecursively(Component component, boolean enabled) {
        component.setEnabled(enabled);
        if (component instanceof Container) {
            for (Component child : ((Container) component).getComponents()) {
                setEnabledRecursively(child, enabled);
            }
        }
    }
}
