/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ExportPanelForm.java
 *
 * Created on 11 mai 2011, 12:18:22
 */
package org.glotaran.core.main.common;

import java.io.File;
import java.io.IOException;
import javax.swing.JFileChooser;
import org.netbeans.api.project.Project;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;

/**
 *
 * @author sergey
 */
public class ExportPanelForm extends javax.swing.JPanel {

    private String fileName = "";
    private FileObject workingDirectory;

    /**
     * Creates new form ExportPanelForm
     */
    public ExportPanelForm() {
        initComponents();
    }

    public ExportPanelForm(Project tgProject) {
        initComponents();
        workingDirectory = tgProject.getProjectDirectory();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        rbTIMP = new javax.swing.JRadioButton();
        rbPlane = new javax.swing.JRadioButton();
        rbCSV = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        jTFFileName = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(rbTIMP);
        rbTIMP.setSelected(true);
        rbTIMP.setText(org.openide.util.NbBundle.getMessage(ExportPanelForm.class, "ExportPanelForm.rbTIMP.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        add(rbTIMP, gridBagConstraints);

        buttonGroup1.add(rbPlane);
        rbPlane.setText(org.openide.util.NbBundle.getMessage(ExportPanelForm.class, "ExportPanelForm.rbPlane.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        add(rbPlane, gridBagConstraints);

        buttonGroup1.add(rbCSV);
        rbCSV.setText(org.openide.util.NbBundle.getMessage(ExportPanelForm.class, "ExportPanelForm.rbCSV.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        add(rbCSV, gridBagConstraints);

        jLabel7.setText(org.openide.util.NbBundle.getMessage(ExportPanelForm.class, "ExportPanelForm.jLabel7.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        add(jLabel7, gridBagConstraints);

        jTFFileName.setText(org.openide.util.NbBundle.getMessage(ExportPanelForm.class, "ExportPanelForm.jTFFileName.text")); // NOI18N
        jTFFileName.setToolTipText(org.openide.util.NbBundle.getMessage(ExportPanelForm.class, "ExportPanelForm.jTFFileName.toolTipText")); // NOI18N
        jTFFileName.setPreferredSize(new java.awt.Dimension(20, 19));
        jTFFileName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTFFileNameFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 250;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        add(jTFFileName, gridBagConstraints);

        jButton2.setText(org.openide.util.NbBundle.getMessage(ExportPanelForm.class, "ExportPanelForm.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(jButton2, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        JFileChooser chooser = workingDirectory != null ? new JFileChooser(FileUtil.toFile(workingDirectory)) : new JFileChooser();
        chooser.setDialogTitle("Select filename ...");
        chooser.setMultiSelectionEnabled(false);
        if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            fileName = chooser.getSelectedFile().getPath();
            if ((rbTIMP.isSelected() && !fileName.endsWith(".ascii"))) {
                fileName += ".ascii";
            } else if ((rbCSV.isSelected() && !fileName.endsWith(".csv"))) {
                fileName += ".csv";
            } else if ((rbPlane.isSelected() && !fileName.endsWith(".dat"))) {
                fileName += ".dat";
            }

        }
        jTFFileName.setText(fileName);


    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTFFileNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTFFileNameFocusLost
       
    }//GEN-LAST:event_jTFFileNameFocusLost
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField jTFFileName;
    private javax.swing.JRadioButton rbCSV;
    private javax.swing.JRadioButton rbPlane;
    private javax.swing.JRadioButton rbTIMP;
    // End of variables declaration//GEN-END:variables

    public String getExportType() {
        if (rbTIMP.isSelected()) {
            return "TIMP";
        }
        if (rbCSV.isSelected()) {
            return "CSV";
        }
        if (rbPlane.isSelected()) {
            return "Plain";
        }
        return "TIMP";
    }

    public String getFileName() {
        if (!fileName.isEmpty()) {
            return fileName;
        } else {
            String tryFileName = jTFFileName.getText();
            if (isValidFileName(tryFileName)) {
                return tryFileName;
            } else {
                return "";
            }
        }
    }

    public boolean isValidFileName(final String aFileName) {
        final File aFile = new File(aFileName);
        boolean isValid = true;
        try {
            if (aFile.createNewFile()) {
                aFile.delete();
            }
        } catch (IOException e) {
            isValid = false;
        }
        return isValid;
    }
}
